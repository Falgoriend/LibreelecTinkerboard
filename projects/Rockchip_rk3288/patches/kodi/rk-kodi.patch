diff -Naur a/cmake/modules/FindX.cmake b/cmake/modules/FindX.cmake
--- a/cmake/modules/FindX.cmake	2017-02-07 00:29:48.000000000 +0100
+++ b/cmake/modules/FindX.cmake	2017-02-21 11:08:54.000000000 +0100
@@ -25,16 +25,21 @@
                        PATHS ${PC_X_x11_LIBDIR})
 find_library(X_EXT_LIBRARY NAMES Xext
                            PATHS ${PC_X_xext_LIBDIR})
+# Omegamoon >>
+find_library(X_RANDR_LIBRARY NAMES Xrandr
+                           PATHS ${PC_X_xrandr_LIBDIR})
+# Omegamoon <<
 
 set(X_VERSION ${PC_X_x11_VERSION})
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(X
-                                  REQUIRED_VARS X_LIBRARY X_EXT_LIBRARY X_INCLUDE_DIR
+                                  REQUIRED_VARS X_LIBRARY X_EXT_LIBRARY X_RANDR_LIBRARY X_INCLUDE_DIR
                                   VERSION_VAR X_VERSION)
 
 if(X_FOUND)
-  set(X_LIBRARIES ${X_LIBRARY} ${X_EXT_LIBRARY})
+  # Omegamoon >> Add libXrandr here to get it linked in... not pretty maybe, but at least it works!
+  set(X_LIBRARIES ${X_LIBRARY} ${X_EXT_LIBRARY} ${X_RANDR_LIBRARY})
   set(X_INCLUDE_DIRS ${X_INCLUDE_DIR})
   set(X_DEFINITIONS -DHAVE_X11=1)
 
@@ -52,6 +57,13 @@
                                   INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}"
                                   INTERFACE_LINK_LIBRARIES X::X)
   endif()
+  if(NOT TARGET X::Xrandr)
+    add_library(X::Xrandr UNKNOWN IMPORTED)
+    set_target_properties(X::Xrandr PROPERTIES
+                                  IMPORTED_LOCATION "${X_RANDR_LIBRARY}"
+                                  INTERFACE_INCLUDE_DIRECTORIES "${X_INCLUDE_DIR}"
+                                  INTERFACE_LINK_LIBRARIES X::X)
+  endif()
 endif()
 
-mark_as_advanced(X_INCLUDE_DIR X_LIBRARY X_EXT_LIBRARY)
+mark_as_advanced(X_INCLUDE_DIR X_LIBRARY X_EXT_LIBRARY X_RANDR_LIBRARY)
diff -Naur a/xbmc/Application.cpp b/xbmc/Application.cpp
--- a/xbmc/Application.cpp	2017-02-21 10:56:04.919363390 +0100
+++ b/xbmc/Application.cpp	2017-02-21 11:12:14.000000000 +0100
@@ -747,6 +747,7 @@
   }
 
   // update the window resolution
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Update the window resolution",__FUNCTION__);
   g_Windowing.SetWindowResolution(m_ServiceManager->GetSettings().GetInt(CSettings::SETTING_WINDOW_WIDTH), m_ServiceManager->GetSettings().GetInt(CSettings::SETTING_WINDOW_HEIGHT));
 
   if (g_advancedSettings.m_startFullScreen && CDisplaySettings::GetInstance().GetCurrentResolution() == RES_WINDOW)
@@ -756,6 +757,7 @@
     sav_res = true;
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Check if requested resolution is valid",__FUNCTION__);
   if (!g_graphicsContext.IsValidResolution(CDisplaySettings::GetInstance().GetCurrentResolution()))
   {
     // Oh uh - doesn't look good for starting in their wanted screenmode
@@ -763,6 +765,7 @@
     CDisplaySettings::GetInstance().SetCurrentResolution(RES_DESKTOP);
     sav_res = true;
   }
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Calling InitWindow()",__FUNCTION__);
   if (!InitWindow())
   {
     return false;
@@ -771,6 +774,7 @@
   if (sav_res)
     CDisplaySettings::GetInstance().SetCurrentResolution(RES_DESKTOP, true);
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Displaying splash screen",__FUNCTION__);
   CSplash::GetInstance().Show();
 
   // The key mappings may already have been loaded by a peripheral
@@ -795,12 +799,14 @@
     res = CDisplaySettings::GetInstance().GetCurrentResolution();
 
   bool bFullScreen = res != RES_WINDOW;
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Creating new %swindow",__FUNCTION__, (bFullScreen?"fullscreen ":""));
   if (!g_Windowing.CreateNewWindow(CSysInfo::GetAppName(), bFullScreen, CDisplaySettings::GetInstance().GetResolutionInfo(res), OnEvent))
   {
     CLog::Log(LOGFATAL, "CApplication::Create: Unable to create window");
     return false;
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Calling InitRenderSystem()", __FUNCTION__);
   if (!g_Windowing.InitRenderSystem())
   {
     CLog::Log(LOGFATAL, "CApplication::Create: Unable to init rendering system");
diff -Naur a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.cpp	2017-02-21 11:17:47.000000000 +0100
@@ -1374,14 +1374,14 @@
 //********************************************************************************************************
 // NV12 Texture loading, creation and deletion
 //********************************************************************************************************
-void CLinuxRendererGLES::UploadNV12Texture(int source)
+bool CLinuxRendererGLES::UploadNV12Texture(int source)
 {
   YUVBUFFER& buf    =  m_buffers[source];
   YV12Image* im     = &buf.image;
   YUVFIELDS& fields =  buf.fields;
 
   if (!(im->flags & IMAGE_FLAG_READY))
-    return;
+    return false;
   bool deinterlacing;
   if (m_currentField == FIELD_FULL)
     deinterlacing = false;
@@ -1434,7 +1434,7 @@
   CalculateTextureSourceRects(source, 3);
 
   glDisable(m_textureTarget);
-  return;
+  return true;
 }
 
 bool CLinuxRendererGLES::CreateNV12Texture(int index)
diff -Naur a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h
--- a/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/LinuxRendererGLES.h	2017-02-21 11:18:00.000000000 +0100
@@ -170,7 +170,7 @@
   bool CreateYV12Texture(int index);
   virtual bool SkipUploadYV12(int index) { return false; }
 
-  void UploadNV12Texture(int index);
+  bool UploadNV12Texture(int index);
   void DeleteNV12Texture(int index);
   bool CreateNV12Texture(int index);
 
diff -Naur a/xbmc/system_gl.h b/xbmc/system_gl.h
--- a/xbmc/system_gl.h	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/system_gl.h	2017-02-21 11:19:05.000000000 +0100
@@ -46,6 +46,9 @@
     #include <OpenGLES/ES2/gl.h>
     #include <OpenGLES/ES2/glext.h>
   #else
+    // Omegamoon >> Enabled GL_GLEXT_PROTOTYPES to expose EGL entry points needed
+    #define GL_GLEXT_PROTOTYPES
+    // Omegamoon <<
     #include <GLES2/gl2.h>
     #include <GLES2/gl2ext.h>
   #endif
diff -Naur a/xbmc/windowing/egl/CMakeLists.txt b/xbmc/windowing/egl/CMakeLists.txt
--- a/xbmc/windowing/egl/CMakeLists.txt	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/windowing/egl/CMakeLists.txt	2017-02-21 11:20:39.000000000 +0100
@@ -1,5 +1,5 @@
 if (NOT MIR_FOUND)
-  if(OPENGLES_FOUND OR AML_FOUND OR IMX_FOUND OR MMAL_FOUND)
+if(OPENGLES_FOUND OR AML_FOUND OR IMX_FOUND OR MMAL_FOUND OR RK_FOUND)
     set(SOURCES EGLWrapper.cpp)
 
     set(HEADERS EGLNativeType.h
@@ -33,6 +33,13 @@
   list(APPEND HEADERS EGLNativeTypeIMX.h)
 endif()
 
+# Omegamoon >>
+#if(RK_FOUND)
+  list(APPEND SOURCES EGLNativeTypeRockchip.cpp)
+  list(APPEND HEADERS EGLNativeTypeRockchip.h)
+#endif()
+# Omegamoon <<
+
 if(SOURCES)
   core_add_library(windowing_egl)
 endif()
diff -Naur a/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp b/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp
--- a/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp	2017-02-10 17:18:38.000000000 +0100
@@ -0,0 +1,483 @@
+/*
+ *      Copyright (C) 2016-2017 Omegamoon
+ *      http://www.omegamoon.com
+ *
+ */
+
+#include <cstdlib>
+#include "system.h"
+#include <EGL/egl.h>
+
+#include "EGLNativeTypeRockchip.h"
+
+#include <math.h>
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include "utils/log.h"
+#include "utils/RegExp.h"
+#include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
+#include "utils/Environment.h"
+#include "guilib/gui3d.h"
+#include "windowing/WindowingFactory.h"
+
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+#include <fstream>
+
+CEGLNativeTypeRockchip::CEGLNativeTypeRockchip()
+{
+  const char *env_framebuffer = getenv("FRAMEBUFFER");
+
+  // default to framebuffer 0
+  m_framebuffer_name = "fb0";
+  if (env_framebuffer)
+  {
+    std::string framebuffer(env_framebuffer);
+    std::string::size_type start = framebuffer.find("fb");
+    m_framebuffer_name = framebuffer.substr(start);
+  }
+  m_nativeWindow = NULL;
+}
+
+CEGLNativeTypeRockchip::~CEGLNativeTypeRockchip()
+{
+}
+
+/**********
+ * Rockchip helper routines
+ **********/
+bool CEGLNativeTypeRockchip::RockchipDetected()
+{
+  static int is_rk = -1;
+  if (is_rk == -1)
+  {
+    // Arbitrary check to see if we're dealing with Rockchip device
+    // Path on 3.10 kernel to identify rockchip platform
+    //is_rk = (SysfsUtils::Has("/sys/bus/platform/drivers/rk-fb") ? 1 : 0);
+    // Path on 4.4+ kernel to identify rockchip platform
+    is_rk = (SysfsUtils::Has("/sys/bus/platform/drivers/rockchip-drm") ? 1 : 0);
+    if (is_rk)
+        CLog::Log(LOGNOTICE, "Rockchip device detected");
+  }
+  return is_rk == 1;
+}
+
+bool CEGLNativeTypeRockchip::RockchipModeToResolution(std::string mode, RESOLUTION_INFO *res) const
+{
+  if (!res)
+    return false;
+
+  res->iWidth = 0;
+  res->iHeight= 0;
+
+  if(mode.empty())
+    return false;
+
+  std::string fromMode = mode;
+  if (!isdigit(mode[0]))
+    fromMode = StringUtils::Mid(mode, 2);
+  StringUtils::Trim(fromMode);
+
+  CRegExp split(true);
+  split.RegComp("([0-9]+)x([0-9]+)([pi])-([0-9]+)");
+  if (split.RegFind(fromMode) < 0)
+    return false;
+
+  int w = atoi(split.GetMatch(1).c_str());
+  int h = atoi(split.GetMatch(2).c_str());
+  std::string p = split.GetMatch(3);
+  int r = atoi(split.GetMatch(4).c_str());
+
+  res->iWidth = w;
+  res->iHeight= h;
+  res->iScreenWidth = w;
+  res->iScreenHeight= h;
+  res->fRefreshRate = r;
+  res->dwFlags = p[0] == 'p' ? D3DPRESENTFLAG_PROGRESSIVE : D3DPRESENTFLAG_INTERLACED;
+
+  res->iScreen       = 0;
+  res->bFullScreen   = true;
+  res->iSubtitles    = (int)(0.965 * res->iHeight);
+  res->fPixelRatio   = 1.0f;
+  res->strMode       = StringUtils::Format("%dx%d @ %.2f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
+                                           res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+  res->strId         = mode;
+
+  return res->iWidth > 0 && res->iHeight> 0;
+}
+
+bool CEGLNativeTypeRockchip::RockchipPermissions()
+{  
+/*
+  3.10 kernel:
+    READ/WRITE access: /sys/class/display/display0.HDMI/mode
+    READ access:       /sys/class/display/display0.HDMI/modes
+  4.4+ kernel: 
+    READ/WRITE access: /sys/class/drm/card0/device/graphics/fb0/mode
+    READ access:       /sys/class/drm/card0/device/graphics/fb0/modes
+*/
+
+  // Check if this is a genuine Rockchip device
+  if (!RockchipDetected())
+    return false;
+
+  // Check permissions we need to properly do our job
+  static int permissions_ok = -1;
+  if (permissions_ok == -1)
+  {
+    permissions_ok = 1;
+
+    //if (!SysfsUtils::HasRW("/sys/class/display/HDMI/mode"))
+    if (!SysfsUtils::HasRW("/sys/class/drm/card0/device/graphics/fb0/mode"))
+    {
+      CLog::Log(LOGERROR, "Rockchip EGL >> No permission to change video mode");
+      permissions_ok = 0;
+    }
+  }
+  
+  return permissions_ok == 1;
+}
+
+bool CEGLNativeTypeRockchip::RockchipSetDisplayResolution(const char *resolution)
+{
+  if (m_curHdmiResolution == resolution)
+    return true;
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> Setting Rockchip resolution to %s", resolution);
+
+  // switch display resolution
+  std::string out = resolution;
+  out += '\n';
+  //if (SysfsUtils::SetString("/sys/class/display/HDMI/mode", out.c_str()) < 0)
+  if (SysfsUtils::SetString("/sys/class/drm/card0/device/graphics/fb0/mode", out.c_str()) < 0)
+    return false;
+
+  m_curHdmiResolution = resolution;
+
+  return true;
+}
+
+/**********
+ * Rockchip compatibility check
+ **********/
+bool CEGLNativeTypeRockchip::CheckCompatibility()
+{
+//int fd;
+  
+  bool ok = RockchipDetected();
+  if (ok) {
+    // Check if we can change the framebuffer resolution
+    ok = SysfsUtils::HasRW("/sys/class/drm/card0/device/graphics/fb0/mode");
+    if (!ok)
+      CLog::Log(LOGERROR, "Rockchip EGL >> No permission to change video mode, or path /sys/class/drm/card0/device/graphics/fb0/mode not found");
+/*
+    //fd = open("/sys/class/display/HDMI/mode", O_RDWR);
+    fd = open("/sys/class/drm/card0/device/graphics/fb0/mode", O_RDWR);
+    ok = (fd >= 0);
+    close(fd);
+*/
+  }
+
+  return ok;
+}
+
+/**********
+ * Rockchip routines to initialize and destroy 
+ **********/
+void CEGLNativeTypeRockchip::Initialize()
+{
+  RockchipPermissions();
+}
+
+void CEGLNativeTypeRockchip::Destroy()
+{
+  return;
+}
+
+bool CEGLNativeTypeRockchip::CreateNativeDisplay()
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> CreateNativeDisplay called...");
+
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::CreateNativeWindow()
+{
+  RESOLUTION_INFO res;
+  int width;
+  int height;
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> CreateNativeWindow called...");
+//#if defined(_FBDEV_WINDOW_H_)
+  /*
+  fbdev_window *nativeWindow = new fbdev_window;
+  if (!nativeWindow)
+    return false;
+  */
+
+  if (GetPreferredResolution(&res)) {
+    // Use resolution which is set during bootup of device, and is decided by kernel
+    CLog::Log(LOGNOTICE, "Rockchip EGL >> Using preferred resolution %dx%d", res.iWidth, res.iHeight);
+/*
+    nativeWindow->width = res.iWidth;
+    nativeWindow->height = res.iHeight;
+*/
+    width = res.iWidth;
+    height = res.iHeight;
+  } else {
+    // Current resolution could not be determined, so fallback to predefined, hardcoded default
+    /*
+    // Use 720p as default when preferred resolution could not be determined
+    nativeWindow->width = 1280;
+    nativeWindow->height = 720;
+    */
+/*
+    // Use 1080p as default when preferred resolution could not be determined
+    nativeWindow->width = 1920;
+    nativeWindow->height = 1080;
+*/  
+    width = 1920;
+    height = 1080;
+
+    CLog::Log(LOGNOTICE, "Rockchip EGL >> Preferred resolution could not be determined, using %dx%d instead", width, height);//nativeWindow->width, nativeWindow->height);
+  }
+
+  //m_nativeWindow = nativeWindow;
+  m_nativeWindow = EGL_DEFAULT_DISPLAY;
+  SetFramebufferResolution(width, height);//nativeWindow->width, nativeWindow->height);
+
+  //CLog::Log(LOGNOTICE, "Rockchip EGL >> CreateNativeWindow finished...");
+  return true;
+//#else
+//  return false;
+//#endif
+}
+
+bool CEGLNativeTypeRockchip::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetNativeDisplay called...");
+  if (!nativeDisplay) {
+    CLog::Log(LOGERROR, "Rockchip EGL >> Native display is undefined");
+    return false;
+  }
+
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetNativeWindow called...");
+  if (!nativeWindow)
+    return false;
+  if (!m_nativeWindow || !m_window)
+    return false;
+  //*nativeWindow = (XBNativeWindowType*)m_nativeWindow;
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetNativeWindow finished...");
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::DestroyNativeDisplay()
+{
+  // Omegamoon >> We don't actuallly destroy the display, since we didn't create it in the first place
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::DestroyNativeWindow()
+{
+//#if defined(_FBDEV_WINDOW_H_)
+  //if (m_nativeWindow)
+    //delete (fbdev_window*)m_nativeWindow, m_nativeWindow = NULL;
+//#endif
+  m_nativeWindow = NULL;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  std::string mode;
+  RESOLUTION_INFO hdmi_res;
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetNativeResolution called...");
+  //if (SysfsUtils::GetString("/sys/class/display/HDMI/mode", mode) == 0 && RockchipModeToResolution(mode, &hdmi_res))
+  if (SysfsUtils::GetString("/sys/class/drm/card0/device/graphics/fb0/mode", mode) == 0 && RockchipModeToResolution(mode, &hdmi_res))
+  {
+    m_curHdmiResolution = mode;
+    *res = hdmi_res;
+    res->iWidth = m_fb_res.iWidth;
+    res->iHeight = m_fb_res.iHeight;
+    res->iSubtitles = (int)(0.965 * res->iHeight);
+  }
+  else
+  {
+    *res = m_fb_res;
+  }
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetNativeResolution finished...");
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> SetNativeResolution called...");
+  switch((int)(res.fRefreshRate*10))
+  {
+    default:
+    case 600:
+      switch(res.iScreenWidth)
+      {
+        default:
+        case 1280:
+          return RockchipSetDisplayResolution("1280x720p-60");
+          break;
+        case 1920:
+          if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+            return RockchipSetDisplayResolution("1920x1080i-60");
+          else
+            return RockchipSetDisplayResolution("1920x1080p-60");
+          break;
+      }
+      break;
+    case 500:
+      switch(res.iScreenWidth)
+      {
+        default:
+        case 1280:
+          return RockchipSetDisplayResolution("1280x720p-50");
+          break;
+        case 1920:
+          if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+            return RockchipSetDisplayResolution("1920x1080i-50");
+          else
+            return RockchipSetDisplayResolution("1920x1080p-50");
+          break;
+      }
+      break;
+    case 300:
+      switch(res.iScreenWidth)
+      {
+        case 3840:
+          return RockchipSetDisplayResolution("4k2k30hz");
+          break;
+        default:
+          return RockchipSetDisplayResolution("1920x1080p-30");
+          break;
+      }
+      break;
+    case 250:
+      switch(res.iScreenWidth)
+      {
+        case 3840:
+          return RockchipSetDisplayResolution("4k2k25hz");
+          break;
+        default:
+          return RockchipSetDisplayResolution("1920x1080p-25");
+          break;
+      }
+      break;
+    case 240:
+      switch(res.iScreenWidth)
+      {
+        case 3840:
+          return RockchipSetDisplayResolution("4k2k24hz");
+          break;
+        case 4096:
+          return RockchipSetDisplayResolution("4k2ksmpte");
+          break;
+        default:
+          return RockchipSetDisplayResolution("1920x1080p-24");
+          break;
+      }
+      break;
+  }
+
+  return false;
+}
+
+bool CEGLNativeTypeRockchip::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> ProbeResolutions called...");
+  CEGLNativeTypeRockchip::GetNativeResolution(&m_fb_res);
+
+  std::string valstr;
+  //if (SysfsUtils::GetString("/sys/class/display/HDMI/modes", valstr) < 0)
+  if (SysfsUtils::GetString("/sys/class/drm/card0/device/graphics/fb0/modes", valstr) < 0)
+    return false;
+  std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
+
+  resolutions.clear();
+  RESOLUTION_INFO res;
+  for (size_t i = 0; i < probe_str.size(); i++)
+  {
+    if (RockchipModeToResolution(probe_str[i].c_str(), &res))
+    {
+      res.iWidth = m_fb_res.iWidth;
+      res.iHeight = m_fb_res.iHeight;
+      res.iSubtitles    = (int)(0.965 * res.iHeight);
+      resolutions.push_back(res);
+    }
+  }
+  
+  return resolutions.size() > 0;
+}
+
+bool CEGLNativeTypeRockchip::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  //return GetNativeResolution(res);
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> GetPreferredResolution called...");
+  // check display/mode, it gets defaulted at boot
+  if (!GetNativeResolution(res))
+  {
+    // default to 720p if we get nothing
+    RockchipModeToResolution("720p", res);
+  }
+
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::ShowWindow(bool show)
+{
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> ShowWindow called...");
+  std::string blank_framebuffer = "/sys/class/graphics/" + m_framebuffer_name + "/blank";
+  SysfsUtils::SetInt(blank_framebuffer.c_str(), show ? 0 : 1);
+  return true;
+}
+
+void CEGLNativeTypeRockchip::SetFramebufferResolution(const RESOLUTION_INFO &res) const
+{
+  SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
+}
+
+void CEGLNativeTypeRockchip::SetFramebufferResolution(int width, int height) const
+{
+  int fd0;
+  std::string framebuffer = "/dev/" + m_framebuffer_name;
+
+  CLog::Log(LOGNOTICE, "Rockchip EGL >> SetFramebufferResolution called...");
+  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  {
+    struct fb_var_screeninfo vinfo;
+    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    {
+      CLog::Log(LOGNOTICE, "Rockchip EGL >> Setting %s to %dx%d resolution", m_framebuffer_name.c_str(), width, height);
+      vinfo.xres = width;
+      vinfo.yres = height;
+      /*
+      vinfo.xres_virtual = 1920;
+      vinfo.yres_virtual = 2160;
+      vinfo.bits_per_pixel = 32;
+      vinfo.activate = FB_ACTIVATE_ALL;
+      */
+      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+    }
+    close(fd0);
+  }
+}
diff -Naur a/xbmc/windowing/egl/EGLNativeTypeRockchip.h b/xbmc/windowing/egl/EGLNativeTypeRockchip.h
--- a/xbmc/windowing/egl/EGLNativeTypeRockchip.h	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/windowing/egl/EGLNativeTypeRockchip.h	2017-01-18 12:22:25.000000000 +0100
@@ -0,0 +1,72 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <string>
+#include <vector>
+
+#include <linux/fb.h>
+#include <EGL/egl.h>
+#include "EGLNativeType.h"
+
+class CEGLNativeTypeRockchip : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeRockchip();
+  virtual ~CEGLNativeTypeRockchip();
+  virtual std::string GetNativeName() const { return "rockchip"; };
+
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+
+protected:
+  bool RockchipDetected();
+  bool RockchipModeToResolution(std::string mode, RESOLUTION_INFO *res) const;
+  bool RockchipPermissions();
+  bool RockchipSetDisplayResolution(const char *resolution);
+
+private:
+  void SetFramebufferResolution(const RESOLUTION_INFO &res) const;
+  void SetFramebufferResolution(int width, int height) const;
+
+  std::string m_framebuffer_name;
+
+  mutable std::string m_curHdmiResolution;
+  mutable RESOLUTION_INFO m_fb_res;
+  EGLNativeWindowType  m_window;
+};
diff -Naur a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
--- a/xbmc/windowing/egl/EGLWrapper.cpp	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/windowing/egl/EGLWrapper.cpp	2017-02-21 11:23:14.000000000 +0100
@@ -34,6 +34,11 @@
 #if defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
 #include "EGLNativeTypeAmlogic.h"
 #endif
+// Omegamoon >> Include Rockchip support... should be done properly with defines later
+#include "EGLNativeTypeRockchip.h"
+#include <EGL/egl.h>
+#include <EGL/eglext.h>
+// Omegamoon <<
 #include "EGLWrapper.h"
 
 #define CheckError() m_result = eglGetError(); if(m_result != EGL_SUCCESS) CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, m_result);
@@ -97,6 +102,9 @@
 #elif defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
 #endif
+      // Omegamoon >> Added Rockchip support; should be done properly with defines later
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeRockchip>(implementation))
+      // Omegamoon <<
       )
   {
     m_nativeTypes = nativeGuess;
@@ -220,6 +228,8 @@
     return false;
   }
 
+  // Omegamoon >> Added debugging...
+  CLog::Log(LOGNOTICE, "EGLWrapper >> eglInitialize called...");
   status = eglInitialize(*display, 0, 0);
   CheckError();
   return status;
@@ -283,6 +293,7 @@
   if (!m_nativeTypes->GetNativeWindow((XBNativeWindowType**)&nativeWindow))
     return false;
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Calling eglCreateWindowSurface()", __FUNCTION__);
   *surface = eglCreateWindowSurface(display, config, *nativeWindow, NULL);
   CheckError();
   return *surface != EGL_NO_SURFACE;
diff -Naur a/xbmc/windowing/egl/WinSystemEGL.cpp b/xbmc/windowing/egl/WinSystemEGL.cpp
--- a/xbmc/windowing/egl/WinSystemEGL.cpp	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/windowing/egl/WinSystemEGL.cpp	2017-02-21 11:24:35.000000000 +0100
@@ -158,6 +158,7 @@
   if(m_egl)
     m_egl->SetNativeResolution(res);
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Checking for EGL quirks", __FUNCTION__);
   int quirks;
   m_egl->GetQuirks(&quirks);
   if (quirks & EGL_QUIRK_RECREATE_DISPLAY_ON_CREATE_WINDOW)
@@ -170,6 +171,7 @@
       }
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Creating EGL surface", __FUNCTION__);
   if (!m_egl->CreateSurface(m_display, m_config, &m_surface))
   {
     CLog::Log(LOGNOTICE, "%s: Could not create a surface. Trying with a fresh Native Window.",__FUNCTION__);
@@ -187,6 +189,7 @@
     }
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Get EGL surface size", __FUNCTION__);
   int width = 0, height = 0;
   if (!m_egl->GetSurfaceSize(m_display, m_surface, &width, &height))
   {
@@ -277,6 +280,7 @@
   m_displayHeight = res.iScreenHeight;
   m_fRefreshRate  = res.fRefreshRate;
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Checking if a new window needs to be created or not...", __FUNCTION__);
   if ((m_bWindowCreated && m_egl && m_egl->GetNativeResolution(&current_resolution)) &&
     current_resolution.iWidth == res.iWidth && current_resolution.iHeight == res.iHeight &&
     current_resolution.iScreenWidth == res.iScreenWidth && current_resolution.iScreenHeight == res.iScreenHeight &&
@@ -288,6 +292,7 @@
     return true;
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> New window needs to be created...", __FUNCTION__);
   int delay = CServiceBroker::GetSettings().GetInt("videoscreen.delayrefreshchange");
   if (delay > 0)
   {
@@ -309,6 +314,7 @@
 
   // If we previously destroyed an existing window we need to create a new one
   // (otherwise this is taken care of by InitWindowSystem())
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Creating new window...", __FUNCTION__);
   if (!CreateWindow(res))
   {
     CLog::Log(LOGERROR, "%s: Could not create new window",__FUNCTION__);
@@ -323,6 +329,7 @@
       (*i)->OnResetDisplay();
   }
 
+  CLog::Log(LOGNOTICE, "%s: Omegamoon >> Calling Show()...", __FUNCTION__);
   Show();
   return true;
 }
diff -Naur a/xbmc/windowing/X11/GLContextEGL.cpp b/xbmc/windowing/X11/GLContextEGL.cpp
--- a/xbmc/windowing/X11/GLContextEGL.cpp	2017-02-07 00:29:48.000000000 +0100
+++ b/xbmc/windowing/X11/GLContextEGL.cpp	2017-02-21 12:15:00.689755506 +0100
@@ -30,6 +30,9 @@
   #include <GL/glu.h>
   #include <GL/glext.h>
 #elif HAS_GLES == 2
+  // Omegamoon >> Enabled GL_GLEXT_PROTOTYPES to expose EGL entry points needed
+  #define GL_GLEXT_PROTOTYPES
+  // Omegamoon <<
   #include <GLES2/gl2.h>
   #include <GLES2/gl2ext.h>
 #endif
